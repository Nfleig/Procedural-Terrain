// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HeightMap
#pragma kernel JitterPoints

#pragma exclude_renderers d3d11_9x
#pragma exclude_renderers d3d9
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise2D.hlsl"

RWTexture2D<float4> Result;

struct Biome
{
	float temperature;
	float moisture;
};

struct Octave
{
	float frequency;
	float2 offset;
	float amplitude;
};

struct GPUMapSettings
{
	float Scale;
	float2 Offset;
	int OctaveCount;
};

struct Output
{
	int chunkBiome;
	float averageElevation;
};

// Constants
bool DrawBiomes;
bool BiomeMap;
bool BiomeBlending;
bool BiomeHeights;
float BiomeBlendRadius;
float Resolution;
float CurveResolution;
float Size;
int BiomeLength;
int jitteredPointsLength;

// Parameters
float2 ChunkPosition;

// Buffers
StructuredBuffer<Biome> Biomes;
StructuredBuffer<GPUMapSettings> maps;
StructuredBuffer<Octave> HeightMapOctaves;
StructuredBuffer<Octave> TemperatureMapOctaves;
StructuredBuffer<Octave> MoistureMapOctaves;
StructuredBuffer<Octave> BiomeBlendMapOctaves;
StructuredBuffer<Octave> JitterMapOctaves;
RWStructuredBuffer<float3> jitteredPoints;
RWStructuredBuffer<Output> OutputBuffer;

// Textures
RWTexture2D<float4> HeightMapTexture;
RWTexture2D<float4> ColorMapTexture;
Texture2D<float4> HeightCurveTexture;
Texture2D<float4> BiomeGradientTexture;
Texture2D<float4> BiomeCurveTexture;

/*
 * NOTE: Compute shaders are extremely annoying to work with. I tried numerous different ways to
 * have a general noise generator that could be used with any noisemap but it seems that the only way for now
 * is to have a seperate noise function for every map. I hate it so much, but it has to be done. 
 */

/*
 * This function calculates noise for the temperature map
 */
float CalculateTemperatureNoise(float2 position)
{
	// If the point is outside of the chunk shift, shift it so that it is
	// inside the adjacent chunk to avoid floating point inaccuracies

	float mapSize = Size / Resolution;
	float2 chunkPosition = ChunkPosition;
	while (position.x < 0)
	{
		chunkPosition.x -= 1;
		position.x += mapSize;
	}
	while (position.x > mapSize)
	{
		chunkPosition.x += 1;
		position.x -= mapSize;
	}
	while (position.y < 0)
	{
		chunkPosition.y -= 1;
		position.y += mapSize;
	}
	while (position.y > mapSize)
	{
		chunkPosition.y += 1;
		position.y -= mapSize;
	}

	// Calculate the offset based off of the chunk position

	float2 offset = maps[1].Offset + chunkPosition - float2(2 * chunkPosition.x / Resolution, 2 * chunkPosition.y / Resolution);
	float height;
	float noiseHeight = 0;
	float sumAmplitudes = 0;
	
	// Take the average of the noise from all of the octaves

	for (int i = 0; i < maps[1].OctaveCount; i++)
	{
		// Calculate the position in the noise from the offset and scale

		float noiseX = (position.x + offset.x) / maps[1].Scale;
		float noiseY = (position.y + offset.y) / maps[1].Scale;

		// Calculate the noise

		noiseHeight += TemperatureMapOctaves[i].amplitude * (ClassicNoise(float2(noiseX * TemperatureMapOctaves[i].frequency + TemperatureMapOctaves[i].offset.x, noiseY * TemperatureMapOctaves[i].frequency + TemperatureMapOctaves[i].offset.y)) / 1.5 + 0.5f);
		sumAmplitudes += TemperatureMapOctaves[i].amplitude;
	}

	// Divide the sum of all of the noise by the sum of the amplitudes

	height = noiseHeight / sumAmplitudes;
	
	// Calculate the pixel coordinate on the height curve texture and use that to get the final noise value

	int curveIndex = (int) (height * CurveResolution);
	height = HeightCurveTexture[int2(curveIndex, 1)];
	return height;
}

float CalculateJitterNoise(float2 position)
{
	// If the point is outside of the chunk shift, shift it so that it is
	// inside the adjacent chunk to avoid floating point inaccuracies

	float mapSize = Size / Resolution;
	float2 chunkPosition = ChunkPosition;
	while (position.x < 0)
	{
		chunkPosition.x -= 1;
		position.x += mapSize;
	}
	while (position.x > mapSize)
	{
		chunkPosition.x += 1;
		position.x -= mapSize;
	}
	while (position.y < 0)
	{
		chunkPosition.y -= 1;
		position.y += mapSize;
	}
	while (position.y > mapSize)
	{
		chunkPosition.y += 1;
		position.y -= mapSize;
	}

	// Calculate the offset based off of the chunk position

	float2 offset = chunkPosition - float2(2 * chunkPosition.x / Resolution, 2 * chunkPosition.y / Resolution);
	float height;
	float noiseHeight = 0;
	float sumAmplitudes = 0;
	
	// Take the average of the noise from all of the octaves

	for (int i = 0; i < 4; i++)
	{
		// Calculate the position in the noise from the offset and scale
		
		float noiseX = (position.x + offset.x) / 0.001;
		float noiseY = (position.y + offset.y) / 0.001;

		// Calculate the noise

		noiseHeight += JitterMapOctaves[i].amplitude * (ClassicNoise(float2(noiseX * JitterMapOctaves[i].frequency + JitterMapOctaves[i].offset.x, noiseY * JitterMapOctaves[i].frequency + JitterMapOctaves[i].offset.y)) / 1.5 + 0.5f);
		sumAmplitudes += JitterMapOctaves[i].amplitude;
	}
	
	// Divide the sum of all of the noise by the sum of the amplitudes

	height = noiseHeight / sumAmplitudes;
	
	// Calculate the pixel coordinate on the height curve texture and use that to get the final noise value

	int curveIndex = (int) (height * CurveResolution);
	height = HeightCurveTexture[int2(curveIndex, 4)];
	return height;
}

float CalculateBiomeBlendNoise(float2 position)
{
	// If the point is outside of the chunk shift, shift it so that it is
	// inside the adjacent chunk to avoid floating point inaccuracies

	float mapSize = Size / Resolution;
	float2 chunkPosition = ChunkPosition;
	while (position.x < 0)
	{
		chunkPosition.x -= 1;
		position.x += mapSize;
	}
	while (position.x > mapSize)
	{
		chunkPosition.x += 1;
		position.x -= mapSize;
	}
	while (position.y < 0)
	{
		chunkPosition.y -= 1;
		position.y += mapSize;
	}
	while (position.y > mapSize)
	{
		chunkPosition.y += 1;
		position.y -= mapSize;
	}

	// Calculate the offset based off of the chunk position

	float2 offset = maps[3].Offset + chunkPosition - float2(2 * chunkPosition.x / Resolution, 2 * chunkPosition.y / Resolution);
	float height;
	float noiseHeight = 0;
	float sumAmplitudes = 0;
	
	// Take the average of the noise from all of the octaves

	for (int i = 0; i < maps[3].OctaveCount; i++)
	{
		// Calculate the position in the noise from the offset and scale
		
		float noiseX = (position.x + offset.x) / maps[3].Scale;
		float noiseY = (position.y + offset.y) / maps[3].Scale;

		// Calculate the noise

		noiseHeight += BiomeBlendMapOctaves[i].amplitude * (ClassicNoise(float2(noiseX * BiomeBlendMapOctaves[i].frequency + BiomeBlendMapOctaves[i].offset.x, noiseY * BiomeBlendMapOctaves[i].frequency + BiomeBlendMapOctaves[i].offset.y)) / 1.5 + 0.5f);
		sumAmplitudes += BiomeBlendMapOctaves[i].amplitude;
	}
	
	// Divide the sum of all of the noise by the sum of the amplitudes

	height = noiseHeight / sumAmplitudes;
	
	// Calculate the pixel coordinate on the height curve texture and use that to get the final noise value

	int curveIndex = (int) (height * CurveResolution);
	height = HeightCurveTexture[int2(curveIndex, 3)];
	return height;
}

float CalculateMoistureNoise(float2 position)
{
	// If the point is outside of the chunk shift, shift it so that it is
	// inside the adjacent chunk to avoid floating point inaccuracies

	float mapSize = Size / Resolution;
	float2 chunkPosition = ChunkPosition;
	while (position.x < 0)
	{
		chunkPosition.x -= 1;
		position.x += mapSize;
	}
	while (position.x > mapSize)
	{
		chunkPosition.x += 1;
		position.x -= mapSize;
	}
	while (position.y < 0)
	{
		chunkPosition.y -= 1;
		position.y += mapSize;
	}
	while (position.y > mapSize)
	{
		chunkPosition.y += 1;
		position.y -= mapSize;
	}

	// Calculate the offset based off of the chunk position

	float2 offset = maps[2].Offset + chunkPosition - float2(2 * chunkPosition.x / Resolution, 2 * chunkPosition.y / Resolution);
	float height;
	float noiseHeight = 0;
	float sumAmplitudes = 0;
	
	// Take the average of the noise from all of the octaves

	for (int i = 0; i < maps[2].OctaveCount; i++)
	{
		// Calculate the position in the noise from the offset and scale
		
		float noiseX = (position.x + offset.x) / maps[2].Scale;
		float noiseY = (position.y + offset.y) / maps[2].Scale;

		// Calculate the noise

		noiseHeight += MoistureMapOctaves[i].amplitude * (ClassicNoise(float2(noiseX * MoistureMapOctaves[i].frequency + MoistureMapOctaves[i].offset.x, noiseY * MoistureMapOctaves[i].frequency + MoistureMapOctaves[i].offset.y)) / 1.5 + 0.5f);
		sumAmplitudes += MoistureMapOctaves[i].amplitude;
	}
	
	// Divide the sum of all of the noise by the sum of the amplitudes

	height = noiseHeight / sumAmplitudes;
	
	// Calculate the pixel coordinate on the height curve texture and use that to get the final noise value

	int curveIndex = (int) (height * CurveResolution);
	height = HeightCurveTexture[int2(curveIndex, 2)];
	return height;
}

float CalculateHeightNoise(float2 position)
{
	// If the point is outside of the chunk shift, shift it so that it is
	// inside the adjacent chunk to avoid floating point inaccuracies

	float mapSize = Size / Resolution;
	float2 chunkPosition = ChunkPosition;
	while (position.x < 0)
	{
		chunkPosition.x -= 1;
		position.x += mapSize;
	}
	while (position.x > mapSize)
	{
		chunkPosition.x += 1;
		position.x -= mapSize;
	}
	while (position.y < 0)
	{
		chunkPosition.y -= 1;
		position.y += mapSize;
	}
	while (position.y > mapSize)
	{
		chunkPosition.y += 1;
		position.y -= mapSize;
	}

	// Calculate the offset based off of the chunk position

	float2 offset = maps[0].Offset + chunkPosition - float2(2 * chunkPosition.x / Resolution, 2 * chunkPosition.y / Resolution);
	float height;
	float noiseHeight = 0;
	float sumAmplitudes = 0;
	
	// Take the average of the noise from all of the octaves

	for (int i = 0; i < maps[0].OctaveCount; i++)
	{
		// Calculate the position in the noise from the offset and scale
		
		float noiseX = (position.x + offset.x) / maps[0].Scale;
		float noiseY = (position.y + offset.y) / maps[0].Scale;

		// Calculate the noise

		noiseHeight += HeightMapOctaves[i].amplitude * (ClassicNoise(float2(noiseX * HeightMapOctaves[i].frequency + HeightMapOctaves[i].offset.x, noiseY * HeightMapOctaves[i].frequency + HeightMapOctaves[i].offset.y)) / 1.6 + 0.5f);
		sumAmplitudes += HeightMapOctaves[i].amplitude;
	}
	
	// Divide the sum of all of the noise by the sum of the amplitudes

	height = noiseHeight / sumAmplitudes;

	// This noise will either be curved or blended later

	return height;
}

/*
 * This function gets the biome at a given position using the temperature
 * and moisture noise
 */

int GetBiome(float2 position)
{
	// Calculate the noise values
	float temperature = CalculateTemperatureNoise(position);
	float moisture = CalculateMoistureNoise(position);

	// Go through the biome list and see which biome best matches the noise values

	for (int i = 0; i < BiomeLength; i++)
	{
		if (temperature <= Biomes[i].temperature)
		{
			if (moisture <= Biomes[i].moisture)
			{
				return i;
			}
		}
	}
	return 0;
}

/*
 * This function takes the buffer of points passed in by JitterPoints() in the world generator
 * and actually jitters them
 */

[numthreads(10, 1, 1)]
void JitterPoints(uint3 id : SV_DispatchThreadID)
{
	// Read in the point

	float3 oldPoint = jitteredPoints[id.x];

	// If the point's z value is an integer then that means that the point has already been jittered
	if (oldPoint.z % 1 != 0)
	{
		// Normalize the point coordinates
		float x = oldPoint.x / Resolution;
		float y = oldPoint.y / Resolution;

		// Generate a random direction for the point
		// NOTE: this direction must be generated from noise, otherwise the jittered
		// 		 points will not line up between chunks and there will be seams

		float dir = CalculateJitterNoise(float2(x, y)) * 2 * 3.14159;

		float dist = 1 / Resolution;

		// Shift the point 1 unit in the random direction
		float3 newPoint = float3(x + (cos(dir) * dist), y + (sin(dir) * dist), 0.0);

		// The point's z will store the biome of the point
		newPoint.z = (float) GetBiome(float2(newPoint.x, newPoint.y));
	
		// See if all of the jittered points have the same biome
		// if they do, then we do not have to do any biome blending

		if (OutputBuffer[0].chunkBiome == -2)
			OutputBuffer[0].chunkBiome = GetBiome(float2(0, 0));
		if (newPoint.z != OutputBuffer[0].chunkBiome)
			OutputBuffer[0].chunkBiome = -1;
	
		// Put the jittered point back into the buffer

		jitteredPoints[id.x] = newPoint;
	}
}

/*
 * This function will generate a color which is the result of biome blending at that position.
 * For more information on biome blending, see this paper: https://noiseposti.ng/posts/2021-03-13-Fast-Biome-Blending-Without-Squareness.html
 */

float4 BlendBiomes(float2 position, int curveIndex)
{
	float4 color = float4(0, 0, 0, 0);
	bool firstBlend = false;

	// Noise is applied to the biome blending to make it more interesting

	float noise = CalculateBiomeBlendNoise(position);
	float radius = sqrt(2) / 2;

	// Iterate through all of the jittered points and see which ones are close to our position

	for (int i = 0; i < jitteredPointsLength; i++)
	{
		float Distance = distance(position, float2(jitteredPoints[i].x, jitteredPoints[i].y));
		if (Distance <= BiomeBlendRadius)
		{
			// If a jittered point is close enough to influence our position, then it blends it's color
			// with the current color using a weight value that increases as the jittered point gets closer to the position

			float distanceWeight = (1 - (Distance / BiomeBlendRadius))  * noise + 0.05;
			if (firstBlend)
			{
				// If this is the first blend, then we just take the jittered point's color

				color = BiomeGradientTexture[int2(curveIndex, jitteredPoints[i].z)];
				firstBlend = false;
			}
			else
			{
				color = lerp(color, BiomeGradientTexture[int2(curveIndex, jitteredPoints[i].z)], distanceWeight);
			}
		}
	}
	return color;
}

/*
 * This function will generate a height that is a result of biome blending at that position
 * For more information on biome blending, see this paper: https://noiseposti.ng/posts/2021-03-13-Fast-Biome-Blending-Without-Squareness.html
 */

float BlendHeights(float2 position, int curveIndex)
{
	float height = 0;
	bool firstBlend = true;

	// Noise is applied to the biome blending to make it more interesting

	float noise = CalculateBiomeBlendNoise(position);
	float radius = sqrt(2) / 2;

	// Iterate through all of the jittered points and see which ones are close to our position

	for (int i = 0; i < jitteredPointsLength; i++)
	{
		float Distance = distance(position, float2(jitteredPoints[i].x, jitteredPoints[i].y));
		if (Distance <= BiomeBlendRadius)
		{
			// If the jittered point is close enough to influence our position, then we average
			// it's height with our current height

			float distanceWeight = (1 - (Distance / BiomeBlendRadius)) * noise + 0.05;
			if (firstBlend)
			{
				// If this is the first blend, then we just take the jittered point's height
				height = BiomeCurveTexture[int2(curveIndex, jitteredPoints[i].z)].r;
				firstBlend = false;
			}
			else
			{
				height = lerp(height, BiomeCurveTexture[int2(curveIndex, jitteredPoints[i].z)].r, distanceWeight);
			}
		}
	}
	return height;
}

/*
 * This function helps debug by visualizing the temperature and moisture maps
 */
float4 temperatureMoistureMap(float2 position) 
{
	float moisture = CalculateMoistureNoise(position);
	float temperature = CalculateTemperatureNoise(position);
	return float4(temperature, moisture, 0, 0);
}

/*
 * This is the main function that the terrain shader runs to generate the height
 * and color map of the chunk
 */

[numthreads(32, 32, 1)]
void HeightMap(uint3 id : SV_DispatchThreadID)
{
	// Normalize the position with the resolution

	float x = id.x / Resolution;
	float y = id.y / Resolution;

	// Calculate the noise at this point

	float noise = 0;

	if (!BiomeMap) {
		noise = CalculateHeightNoise(float2(x, y));
	}

	// Get the pixel coordinate of the noise on the curve textures

	int curveIndex = (int) (noise * CurveResolution);

	if (BiomeHeights && !BiomeMap)
	{
		// If biome specific height curves are enabled, use the biome blending
		// function to get the new noise, but only if there are multiple biomes in the chunk

		if (OutputBuffer[0].chunkBiome != -1)
			noise = BiomeCurveTexture[int2(curveIndex, OutputBuffer[0].chunkBiome)];
		else
			noise = BlendHeights(float2(x, y), curveIndex);
	}
	else
	{
		// If biome heights are not enabled, then just use a default curve
		noise = HeightCurveTexture[int2(curveIndex, 0)];

	}

	// Set the pixels of the heightmap texture
	HeightMapTexture[id.xy] = float4(noise, noise, noise, 0.0);

	// Get the pixel coordinate of the new noise on the gradient textures

	curveIndex = (int) (noise * CurveResolution);
	if (DrawBiomes)
	{
		if (BiomeBlending)
		{
			// If biome blending is enabled, then use the biome blending function
			// to get the color at the current position and set the pixel of the texture,
			// but only if there are multiple biomes in the chunk

			if (OutputBuffer[0].chunkBiome != -1)
			{
				ColorMapTexture[id.xy] = BiomeGradientTexture[int2(curveIndex, OutputBuffer[0].chunkBiome)];
			}
			else
			{
				ColorMapTexture[id.xy] = BlendBiomes(float2(x, y), curveIndex);
			}
		}
		else
		{
			// If biome blending is not enabled, then get the biome at each pixel and set
			// the pixel of the texture to that

			int biome = GetBiome(float2(x, y));
			ColorMapTexture[id.xy] = BiomeGradientTexture[int2(curveIndex, biome)];
		}
	}
	else
	{
		// If drawing biomes is not enabled, then just use the gradient of a default biome

		ColorMapTexture[id.xy] = BiomeGradientTexture[int2(curveIndex, 2)];
	}
}
